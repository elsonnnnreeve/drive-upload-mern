{"ast":null,"code":"require('dotenv').config();\nconst express = require(\"express\");\nconst app = express();\nconst UserModel = require(\"./models/Users\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst stream = require(\"stream\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst {\n  google\n} = require(\"googleapis\");\nconst rateLimit = require(\"express-rate-limit\");\nconst https = require('https');\napp.use(express.json());\napp.use(cors());\napp.use(express.urlencoded({\n  extended: true\n}));\nmongoose.connect(process.env.DB).then(() => console.log(\"Connected to MongoDB\")).catch(err => console.log(\"Cannot connect to MongoDB.\", err));\nmongoose.set('strictQuery', true);\nconst KEYFILEPATH = path.join(__dirname, \"cred1.json\");\nconst SCOPES = [\"https://www.googleapis.com/auth/drive\"];\nconst auth = new google.auth.GoogleAuth({\n  keyFile: KEYFILEPATH,\n  scopes: SCOPES\n});\nconst agent = new https.Agent({\n  rejectUnauthorized: false\n});\nconst drive = google.drive({\n  version: \"v3\",\n  auth,\n  httpAgent: agent\n});\nconst upload = multer();\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 100,\n  message: \"Too many requests from this IP, please try again after 15 minutes\"\n});\napp.use(apiLimiter);\nconst getDriveStorageInfo = async () => {\n  try {\n    const response = await drive.about.get({\n      fields: \"storageQuota\"\n    });\n    return response.data.storageQuota;\n  } catch (error) {\n    console.error(\"Error fetching Drive storage information:\", error.message);\n    throw new Error(\"Unable to fetch Drive storage information.\");\n  }\n};\nconst uploadFile = async fileObject => {\n  const bufferStream = new stream.PassThrough();\n  bufferStream.end(fileObject.buffer);\n  try {\n    const storageInfo = await getDriveStorageInfo();\n    const {\n      limit,\n      usage\n    } = storageInfo;\n    const limitBytes = parseInt(limit, 10);\n    const usageBytes = parseInt(usage, 10);\n    const remainingSpace = limitBytes - usageBytes;\n    console.log(\"Remaining space:\", remainingSpace);\n    console.log(\"Limit:\", limitBytes);\n    console.log(\"Usage:\", usageBytes);\n    console.log(\"File size:\", fileObject.size);\n    if (fileObject.size > remainingSpace) {\n      throw new Error(\"Insufficient storage quota on Google Drive. Unable to upload file.\");\n    }\n    const maxRetries = 3;\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        const {\n          data\n        } = await drive.files.create({\n          media: {\n            mimeType: fileObject.mimetype,\n            body: bufferStream\n          },\n          requestBody: {\n            name: fileObject.originalname\n          },\n          fields: \"id, name\"\n        });\n        const fileUrl = `https://drive.google.com/file/d/${data.id}/view?usp=sharing`;\n        return fileUrl;\n      } catch (error) {\n        console.error(`Attempt ${attempt} - Error uploading file to Drive:`, error.message);\n        if (attempt === maxRetries) {\n          throw error;\n        }\n      }\n    }\n  } catch (error) {\n    console.error(\"Error uploading file to Drive:\", error.message);\n    throw error;\n  }\n};\n\n// File upload endpoint\napp.post(\"/upload\", upload.single('file'), async (req, res) => {\n  try {\n    const {\n      name,\n      age,\n      gender\n    } = req.body;\n    const file = req.file;\n    const fileUrl = await uploadFile(file);\n    const newUser = new UserModel({\n      name,\n      age,\n      gender,\n      id: fileUrl\n    });\n    await newUser.save();\n    res.status(200).json({\n      name,\n      age,\n      gender,\n      id: fileUrl\n    });\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\n\n// Get users endpoint\napp.get(\"/getUsers\", (req, res) => {\n  UserModel.find({}, (err, result) => {\n    if (err) {\n      res.json(err);\n    } else {\n      res.json(result);\n    }\n  });\n});\n\n// New endpoint to get Google Drive \"about\" information\napp.get(\"/drive/about\", async (req, res) => {\n  try {\n    const response = await drive.about.get({\n      fields: \"*\"\n    });\n    res.status(200).json(response.data);\n  } catch (error) {\n    console.error(\"Error fetching Drive about information:\", error.message);\n    res.status(500).json({\n      error: error.message\n    });\n  }\n});\napp.use((req, res, next) => {\n  res.status(404).json({\n    error: \"Not found\"\n  });\n});\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({\n    error: \"Internal server error\"\n  });\n});\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["require","config","express","app","UserModel","mongoose","cors","stream","multer","path","google","rateLimit","https","use","json","urlencoded","extended","connect","process","env","DB","then","console","log","catch","err","set","KEYFILEPATH","join","__dirname","SCOPES","auth","GoogleAuth","keyFile","scopes","agent","Agent","rejectUnauthorized","drive","version","httpAgent","upload","apiLimiter","windowMs","max","message","getDriveStorageInfo","response","about","get","fields","data","storageQuota","error","Error","uploadFile","fileObject","bufferStream","PassThrough","end","buffer","storageInfo","limit","usage","limitBytes","parseInt","usageBytes","remainingSpace","size","maxRetries","attempt","files","create","media","mimeType","mimetype","body","requestBody","name","originalname","fileUrl","id","post","single","req","res","age","gender","file","newUser","save","status","find","result","next","stack","PORT","listen"],"sources":["E:/IS projects/ISP2/client/src/App.js"],"sourcesContent":["require('dotenv').config();\r\nconst express = require(\"express\");\r\nconst app = express();\r\nconst UserModel = require(\"./models/Users\");\r\nconst mongoose = require(\"mongoose\");\r\nconst cors = require(\"cors\");\r\nconst stream = require(\"stream\");\r\nconst multer = require(\"multer\");\r\nconst path = require(\"path\");\r\nconst { google } = require(\"googleapis\");\r\nconst rateLimit = require(\"express-rate-limit\");\r\nconst https = require('https');\r\n\r\napp.use(express.json());\r\napp.use(cors());\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\nmongoose.connect(process.env.DB)\r\n    .then(() => console.log(\"Connected to MongoDB\"))\r\n    .catch((err) => console.log(\"Cannot connect to MongoDB.\", err));\r\n\r\nmongoose.set('strictQuery', true);\r\n\r\nconst KEYFILEPATH = path.join(__dirname, \"cred1.json\");\r\nconst SCOPES = [\"https://www.googleapis.com/auth/drive\"];\r\nconst auth = new google.auth.GoogleAuth({\r\n    keyFile: KEYFILEPATH,\r\n    scopes: SCOPES,\r\n});\r\nconst agent = new https.Agent({ rejectUnauthorized: false });\r\nconst drive = google.drive({ version: \"v3\", auth, httpAgent: agent });\r\nconst upload = multer();\r\n\r\nconst apiLimiter = rateLimit({\r\n    windowMs: 15 * 60 * 1000,\r\n    max: 100,\r\n    message: \"Too many requests from this IP, please try again after 15 minutes\"\r\n});\r\n\r\napp.use(apiLimiter);\r\n\r\nconst getDriveStorageInfo = async () => {\r\n    try {\r\n        const response = await drive.about.get({ fields: \"storageQuota\" });\r\n        return response.data.storageQuota;\r\n    } catch (error) {\r\n        console.error(\"Error fetching Drive storage information:\", error.message);\r\n        throw new Error(\"Unable to fetch Drive storage information.\");\r\n    }\r\n};\r\n\r\nconst uploadFile = async (fileObject) => {\r\n    const bufferStream = new stream.PassThrough();\r\n    bufferStream.end(fileObject.buffer);\r\n\r\n    try {\r\n        const storageInfo = await getDriveStorageInfo();\r\n        const { limit, usage } = storageInfo;\r\n        const limitBytes = parseInt(limit, 10);\r\n        const usageBytes = parseInt(usage, 10);\r\n        const remainingSpace = limitBytes - usageBytes;\r\n\r\n        console.log(\"Remaining space:\", remainingSpace);\r\n        console.log(\"Limit:\", limitBytes);\r\n        console.log(\"Usage:\", usageBytes);\r\n        console.log(\"File size:\", fileObject.size);\r\n\r\n        if (fileObject.size > remainingSpace) {\r\n            throw new Error(\"Insufficient storage quota on Google Drive. Unable to upload file.\");\r\n        }\r\n\r\n        const maxRetries = 3;\r\n        for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n            try {\r\n                const { data } = await drive.files.create({\r\n                    media: {\r\n                        mimeType: fileObject.mimetype,\r\n                        body: bufferStream,\r\n                    },\r\n                    requestBody: {\r\n                        name: fileObject.originalname,\r\n                    },\r\n                    fields: \"id, name\",\r\n                });\r\n                const fileUrl = `https://drive.google.com/file/d/${data.id}/view?usp=sharing`;\r\n                return fileUrl;\r\n            } catch (error) {\r\n                console.error(`Attempt ${attempt} - Error uploading file to Drive:`, error.message);\r\n                if (attempt === maxRetries) {\r\n                    throw error;\r\n                }\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error uploading file to Drive:\", error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// File upload endpoint\r\napp.post(\"/upload\", upload.single('file'), async (req, res) => {\r\n    try {\r\n        const { name, age, gender } = req.body;\r\n        const file = req.file;\r\n        const fileUrl = await uploadFile(file);\r\n\r\n        const newUser = new UserModel({ name, age, gender, id: fileUrl });\r\n        await newUser.save();\r\n\r\n        res.status(200).json({ name, age, gender, id: fileUrl });\r\n    } catch (err) {\r\n        res.status(500).json({ error: err.message });\r\n    }\r\n});\r\n\r\n// Get users endpoint\r\napp.get(\"/getUsers\", (req, res) => {\r\n    UserModel.find({}, (err, result) => {\r\n        if (err) {\r\n            res.json(err);\r\n        } else {\r\n            res.json(result);\r\n        }\r\n    });\r\n});\r\n\r\n// New endpoint to get Google Drive \"about\" information\r\napp.get(\"/drive/about\", async (req, res) => {\r\n    try {\r\n        const response = await drive.about.get({ fields: \"*\" });\r\n        res.status(200).json(response.data);\r\n    } catch (error) {\r\n        console.error(\"Error fetching Drive about information:\", error.message);\r\n        res.status(500).json({ error: error.message });\r\n    }\r\n});\r\n\r\napp.use((req, res, next) => {\r\n    res.status(404).json({ error: \"Not found\" });\r\n});\r\n\r\napp.use((err, req, res, next) => {\r\n    console.error(err.stack);\r\n    res.status(500).json({ error: \"Internal server error\" });\r\n});\r\n\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n    console.log(`Server is running on port ${PORT}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}